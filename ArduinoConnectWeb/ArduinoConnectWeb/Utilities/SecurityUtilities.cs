using ArduinoConnectWeb.Enums;
using Microsoft.IdentityModel.Tokens;
using System.Security.Cryptography;
using System.Text;

namespace ArduinoConnectWeb.Utilities
{
    public static class SecurityUtilities
    {

        //  METHODS

        #region CONVERSION METHODS

        //  --------------------------------------------------------------------------------
        /// <summary> Encode symmetric security key to base64 string. </summary>
        /// <param name="symmetricSecurityKey"> Symmetric security key. </param>
        /// <returns> Encoded symmetric security key as base64 string. </returns>
        public static string EncodeSymmetricSecurityKey(SymmetricSecurityKey symmetricSecurityKey)
        {
            return Convert.ToBase64String(symmetricSecurityKey.Key);
        }

        //  --------------------------------------------------------------------------------
        /// <summary> Decode symmetric security key to base64 string. </summary>
        /// <param name="base64Key"> Encoded symmetric security key as base64 string. </param>
        /// <returns> Symmetric security key. </returns>
        public static SymmetricSecurityKey DecodeSymmetricSecurityKey(string base64Key)
        {
            var decodedKey = Convert.FromBase64String(base64Key);
            return new SymmetricSecurityKey(decodedKey);
        }

        #endregion CONVERSION METHODS

        #region ENCRYPTION METHODS

        //  --------------------------------------------------------------------------------
        /// <summary> Calculate SHA256 hash from string data. </summary>
        /// <param name="rawData"> String data. </param>
        /// <returns> SHA256 hash as string. </returns>
        public static string ComputeSha256Hash(string rawData)
        {
            // Create a SHA256
            using (SHA256 sha256Hash = SHA256.Create())
            {
                //  ComputeHash - returns byte array.
                byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));

                //  Convert byte array to a string.
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < bytes.Length; i++)
                {
                    builder.Append(bytes[i].ToString("x2"));
                }

                return builder.ToString();
            }
        }

        //  --------------------------------------------------------------------------------
        /// <summary> Generate symmetric security key. </summary>
        /// <param name="keySize"> Key size. </param>
        /// <returns> Symetric security key. </returns>
        public static SymmetricSecurityKey GenerateSymmetricSecurityKey(
            SymmetricSecurityKeySize keySize = SymmetricSecurityKeySize.Bits384)
        {
            int size = (int)keySize;
            var keyBytes = GenerateRandomBytes(size);
            return new SymmetricSecurityKey(keyBytes);
        }

        #endregion ENCRYPTION METHODS

        #region UTILITY METHODS

        //  --------------------------------------------------------------------------------
        /// <summary> Generate random bytes. </summary>
        /// <param name="length"> Byte array size. </param>
        /// <returns> Random generated byte array. </returns>
        private static byte[] GenerateRandomBytes(int length)
        {
            byte[] randomBytes = new byte[length];

            using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(randomBytes);
            }

            return randomBytes;
        }

        #endregion UTILITY METHODS

    }
}

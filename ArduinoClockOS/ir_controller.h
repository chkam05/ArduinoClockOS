////////////////////////////////////////////////////////////////////////////////
//  IR CONTROLLER
////////////////////////////////////////////////////////////////////////////////

#ifndef IR_CONTROLLER_H
#define IR_CONTROLLER_H

////////////////////////////////////////////////////////////////////////////////
//  *** INCLUDED LIBRARIES ***
////////////////////////////////////////////////////////////////////////////////

#include <IRremote.h>


////////////////////////////////////////////////////////////////////////////////
//  *** CONFIGURATION ***
////////////////////////////////////////////////////////////////////////////////

#define IR_PIN_SENDER   9


////////////////////////////////////////////////////////////////////////////////
//  *** CLASS DEFINITION ***
////////////////////////////////////////////////////////////////////////////////

class IRController
{
    public:
        IRController();

        void Send(uint32_t data, int delay_time = 250, int repeat = 2);
};


////////////////////////////////////////////////////////////////////////////////
//  *** PUBLIC METHOD BODIES ***
////////////////////////////////////////////////////////////////////////////////

//  Konstruktor klasy modulu kontrolera podczerwieni.
IRController::IRController()
{
    IrSender.begin(IR_PIN_SENDER, DISABLE_LED_FEEDBACK, USE_DEFAULT_FEEDBACK_LED_PIN);
}

//  ----------------------------------------------------------------------------
/*  Wyslanie polecenia przy uzyciu podczerwieni.
 *  @param data: Wiadomosc - kod w postaci hexadecymalnej.
 *  @param delay_time: Czas na reakcje w ms.
 *  @param repeat: Ilosc powtorzen.
 */
void IRController::Send(uint32_t data, int delay_time = 250, int repeat = 2)
{
    IrSender.sendNECRaw(data, repeat);
    delay(delay_time);
}

#endif